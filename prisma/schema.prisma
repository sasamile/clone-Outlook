// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Entity {
  Piedemonte
  Cliente
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  Identity      String?
  entity        Entity?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sentEmails   Email[]  @relation("SentEmails")
  sidebarItems String[]

  EmailRecipient EmailRecipient[]
  UserEmailState UserEmailState[]
  Comment        Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Email {
  id      String   @id @default(cuid())
  subject String?
  body    String?
  date    DateTime @default(now())
  fromId  String
  from    User     @relation("SentEmails", fields: [fromId], references: [id])

  toRecipients  EmailRecipient[] @relation("ToRecipients")
  ccRecipients  EmailRecipient[] @relation("CcRecipients")


  attachments     Attachment[]
  userStates      UserEmailState[]
  comments        Comment[]
  forwardedFrom   Email?           @relation("ForwardedEmails", fields: [forwardedFromId], references: [id])
  forwardedFromId String?
  forwardedTo     Email[]          @relation("ForwardedEmails")

  @@index([fromId])
}

model EmailRecipient {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  toEmail   Email?  @relation("ToRecipients", fields: [toEmailId], references: [id])
  toEmailId String?

  ccEmail   Email?  @relation("CcRecipients", fields: [ccEmailId], references: [id])
  ccEmailId String?

  bccEmailId String?

  @@index([userId])
  @@index([toEmailId])
  @@index([ccEmailId])
  @@index([bccEmailId])
}

model UserEmailState {
  id      String    @id @default(cuid())
  userId  String
  emailId String
  isRead  Boolean   @default(false)
  readAt  DateTime?
  starred Boolean   @default(false)
  folder  String    @default("inbox")
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  email   Email     @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@unique([userId, emailId])
  @@index([userId])
  @@index([emailId])
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  createdAt DateTime @default(now())
  emailId   String
  email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([emailId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailId   String
  email     Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([emailId])
}
